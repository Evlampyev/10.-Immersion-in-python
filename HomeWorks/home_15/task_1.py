# –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –ø—É—Ç—å –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –ü–ö.
# üìå –°–æ–±–µ—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–æ–≤ namedtuple.
# üìå –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Ö—Ä–∞–Ω–∏—Ç:
# ‚óã –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞,
# ‚óã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª,
# ‚óã —Ñ–ª–∞–≥ –∫–∞—Ç–∞–ª–æ–≥–∞,
# ‚óã –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.

from argparse import ArgumentParser
from collections import namedtuple
from pathlib import Path
from logging import basicConfig, getLogger, INFO

if __name__ == '__main__':
    parser = ArgumentParser(description="–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –ø–∞–ø–∫–∏")
    parser.add_argument('path', type=str, nargs=1, help='–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–æ –ø–∞–ø–∫–∏')
    args = parser.parse_args()

    basicConfig(filename='log.log', filemode='w', encoding='utf-8', level=INFO,
                format='{levelname:<8} - {asctime}, {msg}',
                style='{')
    logger = getLogger(__name__)

    Files = namedtuple('Files', ['name', 'extension', 'flag', 'parent_dir'])
    if Path(args.path[0]).exists():
        user_dir = Path(args.path[0])
        logger.info(f'–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –∫–∞—Ç–∞–ª–æ–≥: {user_dir}')
        file_list = []
        for obj in user_dir.iterdir():
            if obj.is_file():
                file = Files(obj.name.split('.')[0], obj.name.split('.')[1], 'file',
                             obj.parent)
            else:
                file = Files(obj.name, None, 'dir', obj.parent)
            file_list.append(file)
            logger.info(f'–û–±—ä–µ–∫—Ç {file} –¥–æ–±–∞–≤–ª–µ–Ω')
    else:
        print(f"–ü—É—Ç–∏ {args.path[0]} –Ω–µ—Ç")
    print('—Å–º. –ª–æ–≥–∏')
