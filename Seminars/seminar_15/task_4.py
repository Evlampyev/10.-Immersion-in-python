# üìå –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞:
# ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù,
# ‚Äú3—è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
# üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
# üìå –õ–æ–≥–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.

# üìå –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 4.
# üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
# üìå –ü—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å.
# –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–µ—Ä—ë—Ç—Å—è –ø–µ—Ä–≤—ã–π –≤ –º–µ—Å—è—Ü–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏,
# —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏/–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
# üìå *–ù–∞—É—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏—è
# –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞, –Ω–æ –∏ —á–∏—Å–ª–æ–≤—ã–µ, —Ç.–µ –Ω–µ –º–∞—è, –∞ 5.

from datetime import date, datetime
import logging
import argparse

WEEKDAYS = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞',
            '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
MONTHS = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
          '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']

logging.basicConfig(filename='log/log_4.log',
                    level=logging.NOTSET,
                    # datefmt='%H:%M:%S',
                    format='[{levelname:<8}] {asctime}: {funcName} -> {msg}',
                    style='{')
LOGGER = logging.getLogger(__name__)
parser = argparse.ArgumentParser(description='–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –¥–∞—Ç—É')
parser.add_argument('-w', metavar='W', help='–Ω–æ–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏', default=1)
parser.add_argument('-d', metavar='D', help='–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —á–∏—Å–ª–æ–º –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º',
                    default=date.today().weekday())
parser.add_argument('-m', metavar='M',
                    help='–ú–µ—Å—è—Ü –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º',
                    default=date.today().month)


def convert_to_date(formatted_date: str) -> date:
    week, weekday, month = formatted_date.split()
    week = int(week.split('-')[0])
    if int(week) > 5:
        LOGGER.error(f'Invalid date format. Expected week <= 5, got {week}')
        return
    if weekday.isdigit():
        weekday = int(weekday)
    else:
        weekday = WEEKDAYS.index(weekday)
    if month.isdigit():
        month = int(month)
    else:
        month = MONTHS.index(month) + 1

    first_month_day = datetime.strptime(f'1 {month} {date.today().year}',
                                        '%d %m %Y').date().weekday()
    month_day = (week - 1) * 7 + weekday - first_month_day + (
        1 if first_month_day < weekday else 8)
    if month_day > 31:
        LOGGER.info(f"Invalid month week: {week}, month_day: {month_day} > 31")
        return
    return datetime.strptime(f'{month_day} {month} {date.today().year}',
                             '%d %m %Y').date()


# print(convert_to_date('1-—è –≤—Ç–æ—Ä–Ω–∏–∫ –¥–µ–∫–∞–±—Ä—è'))
if __name__ == "__main__":
    args = parser.parse_args()
    print(convert_to_date(f'{args.w} {args.d} {args.m}'))
