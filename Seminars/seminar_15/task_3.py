# üìå –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞:
# ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù,
# ‚Äú3—è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
# üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
# üìå –õ–æ–≥–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.

from datetime import date, datetime
from logging import getLogger, basicConfig, NOTSET

WEEKDAYS = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞',
            '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
MONTHS = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞',
          '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']


def convert_to_date(formatted_date: str) -> date | None:
    week, weekday, month = formatted_date.split()
    try:
        weekday = WEEKDAYS.index(weekday)
    except ValueError:
        LOGGER.error(f'–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ {weekday}')
        return
    try:
        month = MONTHS.index(month) + 1
    except ValueError:
        LOGGER.error(f'–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –º–µ—Å—è—Ü–∞ {month}')
        return
    week = int(week.split('-')[0])
    if int(week) > 5:
        LOGGER.error(f'–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–µ–¥–µ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å <=5')
        return

    first_month_day = date(year=date.today().year, month=month, day=1)
    print(first_month_day.weekday())
    if first_month_day.weekday() <= weekday:
        month_day = (week - 1) * 7 + weekday - first_month_day.weekday() + 1
    else:
        month_day = (week - 1) * 7 + weekday - first_month_day.weekday() + 8

    return datetime.strptime(f'{month_day} {month} {date.today().year}',
                             '%d %m %Y').date()


if __name__ == '__main__':
    basicConfig(filename='log/log_3.log',
                level=NOTSET,
                # datefmt='%H:%M:%S',
                format='[{levelname:<8}] {asctime}: {funcName} -> {msg}',
                style='{')
    LOGGER = getLogger(__name__)

    print(convert_to_date('3-–π –¥–æ–¥–∂ —Ñ–µ–≤—Ä–∞–ª—è'))
